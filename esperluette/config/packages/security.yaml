security:
    # Donne le hashage Ã  utiliser pour ma class User
    encoders:
        App\Entity\User:
            algorithm : bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: null }
        # Cherche dans la bdd pour la connexion d'un user
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin: 
            pattern: ^/admin
            anonymous: true

            provider: in_database

            form_login : 
                login_path: admin_login
                check_path: admin_login
                
            logout: 
                path: admin_logout
                target: home

        main:
            anonymous: true

            # Connecte le providers au firewall
            provider: in_database

            form_login:
                login_path: security_login
                check_path: security_login

            logout: 
                path: security_logout
                target: security_login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
